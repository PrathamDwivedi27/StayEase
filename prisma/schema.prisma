// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


model User{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String?    //agar google se karenge to name kha se aayega
  email String? @unique
  emailVerified DateTime?
  image String?
  hashedPassword String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  favoriteIds String[] @db.ObjectId //user can have many favorites

  accounts Account[]  //user can have many accounts
  listings Listing[]  //user can have many listings
  reservations Reservation[]  //user can have many reservations
}

model Account{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  type String
  provider String
  providerAccountId String
  refreshToken String? @db.String
  accessToken String? @db.String
  expiresAt Int?
  tokenType String?
  scope String?
  idToken String? @db.String
  sessionState String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)  //matlab userId hai jo account mein wo User model ke id ko reference de rha hai
  @@unique([provider, providerAccountId])
}


model Listing{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  title String
  description String
  imageSrc String
  category String
  roomCount Int
  bathroomCount Int
  guestCount Int
  locationValue String
  userId String @db.ObjectId
  price Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)  

  reservations Reservation[]  //listing can have many reservations
}

model Reservation{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  startDate DateTime
  endDate DateTime
  userId String @db.ObjectId
  listingId String @db.ObjectId
  totalPrice Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)  
  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)  
}

